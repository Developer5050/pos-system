generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  businessName String?
  email        String    @unique
  phone        String    @unique
  password     String
  role         Role      @default(CASHIER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]
  tokens       Token[]
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([expiresAt])
}

model Product {
  id           Int           @id @default(autoincrement())
  title        String
  description  String?
  image        String?
  stock        Int           @default(0)
  sku          String        @unique
  barcode      String        @unique
  status       ProductStatus @default(ACTIVE)
  unit         ProductUnit   @default(PIECE)
  brand        String
  costPrice    Float
  sellingPrice Float
  discount     Float         @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  categoryId   Int?
  category     Category?      @relation(fields: [categoryId], references: [id])
  createdById  Int?
  createdBy User? @relation(fields: [createdById], references: [id])
  orderItems OrderItem[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

enum Role {
  CASHIER
  ADMIN
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum ProductUnit {
  PIECE
  KG
  LITER
  DOZEN
  PACK
}

model Order {
  id           Int          @id @default(autoincrement())
  orderNumber  String       @unique
  amount       Float
  status       OrderStatus  @default(UNPAID)
  orderDate    DateTime     @default(now())

  customer     Customer     @relation(fields: [customerId], references: [id])
  customerId   Int

  orderItems   OrderItem[]

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum OrderStatus {
  PAID
  UNPAID
  PENDING
  CONFIRMED
  CANCELLED
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float

  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int

  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model Customer {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  phone    String?
  address  String?
  createdAt DateTime @default(now())

  orders   Order[]
}


model Settings {
  id                   Int      @id @default(autoincrement())
  // General
  businessName         String   @default("My POS Business")
  currency             String   @default("USD")
  timezone             String   @default("UTC-5")
  dateFormat           String   @default("MM/DD/YYYY")
  language             String   @default("English")

  // Receipt
  printReceipts        Boolean  @default(true)
  receiptHeader        String   @default("Thank you for your business!")
  receiptFooter        String   @default("Returns accepted within 30 days")
  printTaxId           Boolean  @default(true)
  taxId                String   @default("TAX-123456789")

  // Tax
  taxEnabled           Boolean  @default(true)
  taxRate              Float    @default(0)
  taxInclusive         Boolean  @default(false)

  // Payment
  cashPayment          Boolean  @default(true)
  cardPayment          Boolean  @default(true)
  digitalWallet        Boolean  @default(true)
  allowPartialPayments Boolean  @default(false)

  // Inventory
  lowStockAlert        Boolean  @default(true)
  lowStockThreshold    Int      @default(10)
  allowNegativeInventory Boolean @default(false)

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}



